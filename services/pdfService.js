const PDFDocument = require("pdfkit");

exports.generatePrescriptionPDF = async (prescription, medicines) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ 
        margin: 50,
        size: 'A4',
        info: {
          Title: 'PD Prescription',
          Author: 'NKTI System',
          Subject: 'Peritoneal Dialysis Prescription'
        }
      });

      const chunks = [];
      doc.on('data', (chunk) => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));
      doc.on('error', reject);

      // Header with styling
      doc.fillColor('#2c5530')
         .fontSize(20)
         .font('Helvetica-Bold')
         .text("NKTI - PERITONEAL DIALYSIS PRESCRIPTION", { align: "center" });
      
      doc.moveDown(0.5);
      
      // Add a line separator
      doc.strokeColor('#2c5530')
         .lineWidth(1)
         .moveTo(50, doc.y)
         .lineTo(545, doc.y)
         .stroke();
      
      doc.moveDown();

      // Patient Information
      doc.fillColor('#333333')
         .fontSize(14)
         .font('Helvetica-Bold')
         .text("PATIENT INFORMATION");
      
      doc.fontSize(10)
         .font('Helvetica')
         .text(`Patient ID: ${prescription.patient_id || 'N/A'}`, { continued: true })
         .text(`  |  Date: ${new Date(prescription.created_at).toLocaleDateString()}`);
      
      doc.moveDown(0.5);

      // Doctor Information
      doc.fontSize(12)
         .font('Helvetica-Bold')
         .text("PRESCRIBING DOCTOR");
      
      doc.fontSize(10)
         .font('Helvetica')
         .text(`Name: ${prescription.doctor || 'Not specified'}`);
      
      if (prescription.specialization) {
        doc.text(`Specialization: ${prescription.specialization}`);
      }
      
      doc.moveDown();

      // Dialysis Prescription Details
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text("DIALYSIS PRESCRIPTION", { underline: true });
      
      doc.fontSize(10)
         .font('Helvetica')
         .text(`• PD System: ${prescription.pd_system || "Not specified"}`)
         .text(`• Modality: ${prescription.pd_modality || "Not specified"}`)
         .text(`• Total Exchanges per Day: ${prescription.pd_total_exchanges || "Not specified"}`)
         .text(`• Fill Volume: ${prescription.pd_fill_volume || "Not specified"} liters`)
         .text(`• Dwell Time: ${prescription.pd_dwell_time || "Not specified"} hours`);
      
      // Bag Percentages
      if (prescription.pd_bag_percentages) {
        doc.text(`• Bag Concentrations: ${prescription.pd_bag_percentages}`);
      }
      
      doc.moveDown();

      // Medicines Section
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text("PRESCRIBED MEDICATIONS", { underline: true });
      
      if (medicines && medicines.length > 0) {
        medicines.forEach((med, index) => {
          const yPosition = doc.y;
          
          // Medicine header
          doc.fontSize(11)
             .font('Helvetica-Bold')
             .text(`${index + 1}. ${med.name}`);
          
          // Medicine details
          doc.fontSize(9)
             .font('Helvetica')
             .text(`   Dosage: ${med.dosage || 'Not specified'}`, 70, doc.y)
             .text(`   Frequency: ${med.frequency || 'Not specified'}`)
             .text(`   Duration: ${med.duration || 'Not specified'}`);
          
          if (med.instructions) {
            doc.text(`   Instructions: ${med.instructions}`);
          }
          
          doc.moveDown(0.3);
        });
      } else {
        doc.fontSize(10)
           .text("No medications prescribed for this treatment.");
      }

      doc.moveDown();

      // Footer
      const footerY = 750;
      doc.y = footerY;
      
      doc.fontSize(8)
         .fillColor('#666666')
         .text('Generated by NKTI PD Monitoring System', 50, footerY, { align: 'center' })
         .text(`Document generated on: ${new Date().toLocaleString()}`, 50, footerY + 12, { align: 'center' });

      doc.end();

    } catch (error) {
      reject(error);
    }
  });
};

// Additional function for treatment reports
exports.generateTreatmentReportPDF = async (treatmentData) => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ margin: 50 });
    const chunks = [];
    
    doc.on('data', (chunk) => chunks.push(chunk));
    doc.on('end', () => resolve(Buffer.concat(chunks)));
    doc.on('error', reject);

    // Add your treatment report content here
    doc.fontSize(18).text("TREATMENT REPORT", { align: "center" });
    doc.moveDown();
    
    // Treatment details...
    doc.text(`Patient: ${treatmentData.patientName}`);
    doc.text(`Treatment Date: ${treatmentData.date}`);
    doc.text(`Dialysate: ${treatmentData.dialysate}`);
    doc.text(`Volume: ${treatmentData.volume}ml`);
    
    doc.end();
  });
};